# -*- coding: utf-8 -*-
"""Copy of 0420-Accruals in the Cross Section.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zrHOFpJcPl0lG1iceoYRrREIKS35iIhp

# Accruals, cash flows, and operating profitability in the cross section of stock returns

## Import Pandas
"""

from google.colab import drive
drive.mount("/content/gdrive", force_remount=True)


import pandas as pd
import statsmodels.formula.api as smf
import numpy as np
import matplotlib.pyplot as plt

!pip install pandasql
import os
from datetime import datetime
from sklearn.model_selection import train_test_split
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.arima_model import ARIMA
from sklearn.metrics import mean_squared_error, mean_absolute_error

import math
import matplotlib.pyplot as plt
from datetime import datetime
import seaborn as sns
import pandasql as ps

from sqlite3 import connect
conn=connect(':memory:')

"""## Dataload"""

#CRSP
filepath="/content/gdrive/MyDrive/Accruals/"

file="CRSPMONTHLY.csv"
crsp=pd.read_csv(filepath + file)

crsp['date'] = pd.to_datetime(crsp['date'], format="%Y%m%d")


crsp=crsp[("1960-01-01"<=crsp['date']) & (crsp['date']< "2019-01-01")]
crsp_parsed=crsp[['PERMNO', 'date', 'RET', 'SHROUT', 'ALTPRC', 'EXCHCD', 'SHRCD', 'SICCD', 'DLRET', 'DLSTCD', 'VOL']]
crsp=crsp_parsed


x=['PERMNO', 'RET', 'SHROUT', 'ALTPRC', 'EXCHCD', 'SHRCD', 'SICCD', 'DLRET', 'DLSTCD']

for i in x:
  crsp[i]=pd.to_numeric(crsp[i], errors='coerce')


#convert returns to percent:
crsp['RET']*=100
crsp['DLRET']*=100


#add market cap column
crsp['mkt_cap']=abs(crsp['SHROUT'] * crsp['ALTPRC'])/1000
crsp['mkt_cap'].replace(0, np.NaN, inplace=True)


#ONLY KEEP US BASED COMMON STOCKS
crsp=crsp[(crsp['SHRCD']==10)|(crsp['SHRCD']==11)]

#rename variables to lower case
crsp= crsp.rename(columns=str.lower)

#filter for relevant exchanges
exchange_mapping = {
    1: 'NYSE', 31: 'NYSE',
    2: 'AMEX', 32: 'AMEX',
    3: 'NASDAQ', 33: 'NASDAQ'
}
#create dictionary to map values of the 'exchcd' column
crsp['exchange'] = np.select(
    [crsp['exchcd'].isin(exchange_mapping.keys()), crsp['exchcd'].notnull()],
    [crsp['exchcd'].map(exchange_mapping), "Other"],
    default='Other')


#Adjust Returns
crsp['ret_adj'] = crsp['ret']

mask1 = pd.isnull(crsp['dlstcd'])
crsp.loc[mask1, 'ret_adj'] = crsp.loc[mask1, 'ret']

mask2 = pd.notnull(crsp['dlstcd']) & pd.notnull(crsp['dlret'])
crsp.loc[mask2, 'ret_adj'] = crsp.loc[mask2, 'dlret']

mask3 = ((551 <= crsp['dlstcd']) & (crsp['dlstcd'] <= 574)) | (crsp['dlstcd'].isin([500, 520, 580, 584]))
crsp.loc[mask3, 'ret_adj'] = -30

crsp.loc[~(mask1 | mask2 | mask3), 'ret_adj'] = -100

crsp.drop(['shrcd', 'dlret', 'dlstcd'], inplace=True, axis=1)

#exclude financial firms
crsp=crsp[(crsp['siccd']<6000) |(crsp['siccd']>6999) ]


#Add reference date for matching with Compustat

crsp['date']=pd.to_datetime(crsp['date'])
crsp['year']=crsp['date'].dt.year

crsp['reference_date']=pd.to_datetime(crsp['year'].astype(str) +'-06-01')

crsp.loc[crsp['date'].dt.month < 6, 'year'] -= 1

crsp.loc[crsp['date'].dt.month < 6, 'reference_date'] = pd.to_datetime(
    crsp['year'].astype(str) + '-06-01')

crsp = crsp.drop('year', axis=1)

crsp.set_index('date', inplace=True)

crsp.sort_values(by=['date', 'permno'], inplace=True)

#COMPUSTAT
filepath="/content/gdrive/MyDrive/Accruals/"

compustat=pd.read_csv(filepath + "compustat.csv")

#Operating Profitability
#REVT: Revenue
#COGS: Cost of goods sold
#XSGA-XRD: Reported sales, general and administrative expenses

#Cash Based Operating Profitability
#RECT: Accounts Recievable
#INVT: Inventory
#XPP: Prepaid Expenses
#DRC + DRLT: Deferred Revenue
#AP: Trade Accounts Payable
#XACC: Accrued Expenses

#CBOP-Alternate (Table 3)
#RECCH: Decrease in accounts receivable
#INVCH: Decrease in Inventory
#APALCH: Increase in accounts payable and accrued liabilities

#Accruals
#ACT: Current Assets
#CH: Cash
#LCT: Current Liabilities
#DLC: Debt in Current Liabilities
#TXP: Income Taxes

#Accruals-Alternate

#RECCH: Decrease in accounts receivable
#INVCH: Decrease in Inventory
#APALCH: Increase in accounts payable and accrued liabilities
#AOLOCH: Net change in other assets and liabilities
#TXACH: Increase in accrued income taxes

compustat= compustat.rename(columns=str.lower)
x=['gvkey', 'lpermno', 'datadate', 'linktype', 'linkenddt', 'seq', 'ceq',
                    'at', 'lt', 'txditc', 'txdb', 'itcb', 'pstkrv', 'pstkl', 'pstk', 'indfmt', 'datafmt',
                     'revt', 'cogs', 'xint', 'xsga', 'xrd', 'rect', 'invt', 'xpp', 'drc', 'drlt', 'ap', 'xacc',
                      'cstk', 'caps', 'tstk', 're', 'acominc', 'mkvalt', 'act', 'ch', 'lct', 'dlc', 'txp', 'dp', 'gp',
                        'recch', 'invch', 'apalch', 'aoloch', 'txach']

compustat=compustat[x]


dates=['datadate', 'linkenddt']
for date in dates:
  compustat[date]=pd.to_datetime(compustat[date], format="%Y%m%d", errors='coerce')

#filter columns
compustat['datafmt']=compustat['datafmt'].apply(str)
compustat=compustat[compustat["indfmt"]=="INDL"]
compustat=compustat[compustat['datafmt']=="STD"]

#Only keep valid links
compustat=compustat[(compustat["linktype"]=="LU")| (compustat["linktype"]=="LC")]

#Only keep links active at datadate
compustat=compustat[(compustat['datadate']<=compustat["linkenddt"]) | pd.isnull(compustat['linkenddt'])]

#calculate book value using FF definition
compustat.to_sql("compustat", conn, if_exists='replace')

query='''
        SELECT DISTINCT *,
        COALESCE(seq, ceq+pstk, at-lt) + COALESCE(txditc, txdb + itcb, 0)- COALESCE(pstkrv, pstkl, pstk, 0) as book_value
        FROM compustat'''

compustat_calc=pd.read_sql(query, conn)

compustat=compustat_calc

#add reference date for matching- We lag accounting information by 6 months,
#therefore if a firms financial year ends in June, we assume this information is
#available to investors the following June
compustat['datadate']=pd.to_datetime(compustat['datadate'], errors='coerce')

compustat['year']=compustat['datadate'].dt.year
compustat['year']=pd.to_numeric(compustat['year'], errors='coerce')
compustat['reference_date']=compustat['year']+1
compustat['reference_date']=compustat['reference_date'].apply(str)
compustat['reference_date']+="-06-01"
compustat['reference_date']=pd.to_datetime(compustat['reference_date'])

compustat.sort_values(by=['lpermno', 'datadate'], inplace=True)

#Operating profitability calculation

compustat['op']=compustat['revt']-compustat['cogs']-(compustat['xsga']-compustat['xrd'])

#fill missing values with 0's
for x in ['rect', 'invt', 'xpp', 'drc', 'drlt', 'ap', 'xacc', 'act', 'ch', 'lct', 'dlc', 'txp', 'dp']:
  compustat[x]=compustat[x].fillna(0)


#get lag of variables to calculate changes

for x in ['rect', 'invt', 'xpp', 'drc', 'drlt', 'ap', 'xacc', 'act', 'ch', 'lct', 'dlc', 'txp', 'dp']:
    compustat[f'{x}_lag1'] = compustat.groupby('lpermno')[x].shift(1)

#calculate deltas
for x in ['rect', 'invt', 'xpp', 'drc', 'drlt', 'ap', 'xacc', 'act', 'ch', 'lct', 'dlc', 'txp', 'dp']:
  compustat[f'delta_{x}']=compustat[x]-compustat[f'{x}_lag1']


#cash based operating profitability

compustat['delta_dr']=compustat['delta_drc']+compustat['delta_drlt']

compustat['cbop']=compustat['op']-compustat['delta_rect']-compustat['delta_invt']-compustat['delta_xpp']+compustat['delta_dr']+compustat['delta_ap']+compustat['delta_xacc']

#accruals
compustat['accruals']=compustat['delta_act']-compustat['delta_ch']-(compustat['delta_lct']-compustat['delta_dlc']-compustat['delta_txp'])-compustat['dp']

#cash based operating profitability alternate calculation
compustat['cbop_alternate']=compustat['op']+compustat['recch']+compustat['invch']+compustat['apalch']

#accruals alternate calculation
compustat['accruals_alternate']=-(compustat['recch'])-compustat['invch']-compustat['apalch']-compustat['aoloch']-compustat['txach']

compustat.rename(columns={'lpermno':'permno'}, inplace=True)
#compustat.drop('index', axis=1, inplace=True)

#compustat.rename(columns={'da_a/t-1': 'da_a_t_1'}, inplace=True)
#crsp.drop(['level_0'],axis=1, inplace=True)
crsp.to_sql("crsp", conn, if_exists='replace')
compustat.to_sql("compustat", conn, if_exists='replace')

query='''
        SELECT DISTINCT crsp.*, c.gvkey, c.seq, c.ceq, c.at, c.lt,
        c.txditc, c.txdb, c.itcb, c.pstkrv, c.pstkl, c.pstk,
        c.revt, c.cogs, c.xint, c.xsga, c.xrd, c.rect, c.invt,
        c.xpp, c.drc, c.drlt, c.ap, c.xacc, c.cstk, c.caps, c.tstk,
        c.re, c.acominc, c.mkvalt, c.book_value, c.op, c.cbop, c.accruals, c.gp, c.cbop_alternate, c.accruals_alternate
        FROM crsp
        LEFT JOIN compustat c
        ON crsp.permno=c.permno
        AND crsp.reference_date=c.reference_date
        '''
crsp_comp=pd.read_sql(query, conn)
crsp=crsp_comp

crsp['date'] = pd.to_datetime(crsp['date'])
me=crsp[(crsp['date'].dt.month==12)]
me['reference_date']=(me['date'].dt.year) + 1
me['reference_date']=me['reference_date'].apply(str)
me['reference_date']+="-06-01"
me['reference_date']=pd.to_datetime(me['reference_date'])
#me.drop(['level_0'], axis=1, inplace=True)
me.to_sql('me', conn, if_exists='replace')

query='''
        SELECT DISTINCT permno, reference_date, mkt_cap as market_equity
        FROM me
        '''
me=pd.read_sql(query, conn)


crsp.to_sql('crsp', conn, if_exists='replace')
me.to_sql('me', conn, if_exists='replace')

query='''
        SELECT DISTINCT crsp.*, me.market_equity
        FROM crsp
        LEFT JOIN me
        ON crsp.permno=me.permno
        AND crsp.reference_date=me.reference_date
        '''
crsp_me=pd.read_sql(query, conn)

crsp=crsp_me

#get prior month returns and 2-12 month returns

columns=[]
for x in range(1,13):
  label=f"return_t-{x}"
  columns.append(label)
  crsp[f'return_t-{x}']=crsp.groupby('permno')['ret_adj'].shift(x)


#2-12 month returns
for x in range(2,13):
  crsp[f'return_t-{x}']/=100
  crsp[f'return_t-{x}']+=1

crsp['return_t-2_t-12'] = np.cumprod(crsp.loc[:, 'return_t-2':'return_t-12'], axis=1).iloc[:, -1]

# Subtract 1 and convert the result back to percentage returns
crsp['return_t-2_t-12'] = (crsp['return_t-2_t-12'] - 1) * 100

crsp['ret_adj'].isnull().sum()

"""**Sample Filters**"""

#filter sample
crsp.dropna(subset=['market_equity'], inplace=True)
crsp.dropna(subset=['book_value'], inplace=True)
crsp.dropna(subset=['gp'], inplace=True)
crsp.dropna(subset=['ret_adj'], inplace=True)

#date filter
crsp['date'] = pd.to_datetime(crsp['date'])  # Convert the 'date' column to Pandas Timestamp objects
crsp = crsp[(crsp['date'] >= pd.to_datetime('1963-07-01')) & (crsp['date'] <= pd.to_datetime('2014-12-31'))]

"""**Construct Variables**"""

#scale variables by book value of total assets

crsp['op_scaled']=crsp['op']/crsp['at']
crsp['cbop_scaled']=crsp['cbop']/crsp['at']
crsp['accruals_scaled']=crsp['accruals']/crsp['at']

crsp['cbop_alternate_scaled']=crsp['cbop_alternate']/crsp['at']
crsp['accruals_alternate_scaled']=crsp['accruals_alternate']/crsp['at']

#book value variables
crsp['book_to_market']=crsp['book_value']/crsp['market_equity']
import numpy as np
epsilon = 1e-8  # A small positive value to add to 'book_to_market' to avoid taking the logarithm of non-positive values
crsp['log_book_to_market'] = np.log(crsp['book_to_market'] + epsilon)
crsp['log_market_equity']=np.log(crsp['market_equity']+ epsilon)

#return variables
crsp['return_t-1']/=100
crsp['return_t-2_t-12']/=100

crsp.dropna(subset=['return_t-2_t-12'], inplace=True)

"""# Table 1"""

columns = ['mean', 'sd', '1st', '25th', '50th', '75th', '99th']

# create list of row names
index = ['Operating profitability', 'Accruals', 'Cash based operating profitability', 'log(BE/ME)', 'log(ME)', 'r1', 'r12']

# create empty DataFrame
a = pd.DataFrame(index=index, columns=columns)

labels={'op_scaled': 'Operating profitability', 'cbop_scaled': 'Cash based operating profitability', 'accruals_scaled': 'Accruals', 'log_book_to_market':'log(BE/ME)', 'log_market_equity': 'log(ME)', 'return_t-1': 'r1', 'return_t-2_t-12': 'r12'   }

for x in ['op_scaled', 'cbop_scaled', 'accruals_scaled', 'log_book_to_market', 'log_market_equity', 'return_t-1', 'return_t-2_t-12']:
  mean=crsp[x].mean().round(3)
  a.loc[labels[x], 'mean'] = mean

  sd=crsp[x].std().round(3)
  a.loc[labels[x], 'sd'] = sd

  percentiles={0.01: '1st', 0.25:'25th', 0.5: '50th', 0.75: '75th', 0.99: '99th'}
  for y in [0.01, 0.25, 0.5, 0.75, 0.99]:
    percentile=(crsp[x].groupby(crsp['date'].dt.year).quantile(q=y)).mean().round(3)
    a.loc[labels[x], percentiles[y]]=percentile



a

"""Panel B"""

corr=crsp[['op_scaled', 'accruals_scaled', 'cbop_scaled']]
b_pearson=corr.corr(method='pearson')
b_pearson.round(3)

corr=crsp[['op_scaled', 'accruals_scaled', 'cbop_scaled']]
b_spearman=corr.corr(method='spearman')
b_spearman.round(3)

"""##Table 2

**Exclude Microcaps**
"""

crsp['date']=pd.to_datetime(crsp['date'])
sb=crsp[(crsp['date'].dt.month==6) & (crsp['exchange']=="NYSE")]
sb.to_sql('sb', conn, if_exists='replace')

query='''
        SELECT DISTINCT permno, reference_date, mkt_cap as ff_mkt_equity
        FROM sb
        '''

sb=pd.read_sql(query, conn)

#get 20% quantile of market equity for NYSE
sb['microcap_mkt_cap'] = sb.groupby('reference_date')['ff_mkt_equity'].transform(lambda x: x.quantile(0.2))

sb.to_sql('sb', conn, if_exists='replace')

query='''
        SELECT DISTINCT reference_date, microcap_mkt_cap
        FROM SB
        '''
sb=pd.read_sql(query, conn)

crsp.to_sql('crsp', conn, if_exists='replace')
sb.to_sql('sb', conn, if_exists='replace')

query='''
        SELECT DISTINCT crsp.*, sb.microcap_mkt_cap
        FROM crsp
        LEFT JOIN sb
        ON crsp.reference_date=sb.reference_date
        '''
crsp_sb=pd.read_sql(query, conn)
crsp=crsp_sb

#create copy of crsp and create df for megacaps

crsp_copy=crsp.copy()
crsp = crsp_copy[crsp_copy['market_equity'] >= crsp_copy['microcap_mkt_cap']]

#create df for microcaps

crsp_micro=crsp_copy[crsp_copy['market_equity'] < crsp_copy['microcap_mkt_cap']]

"""**Fama McBeth Regressions**"""

# create list of row names
index = ['Operating profitability', 'Accruals', 'Cash based operating profitability', 'log(BE/ME)', 'log(ME)', 'R1', 'R12', 'Adjusted R2']

# create list of column names with numbers in brackets
columns = ['1', '2', '3', '4', '5', '6', '7']

# create empty DataFrame with specified rows and columns
table_2a = pd.DataFrame(columns=columns, index=index)

table_2b = pd.DataFrame(columns=columns, index=index)

"""**For regression (1) we do not require non-missing values and variables are left untrimmed.**"""

#specification 1


#Megacaps
df = pd.DataFrame({'DATE':[], 'OP': [], 'log(BE/ME)': [], 'log(ME)': [], 'r1': [], 'r12': [], 'r^2':[]})
dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  crsp_temp=crsp[crsp['date']==date]
  crsp_temp.fillna(value=0, inplace=True)
  X=crsp_temp[['op_scaled', 'log_book_to_market', 'log_market_equity', 'return_t-1', 'return_t-2_t-12'] ]
  X = sm.add_constant(X)
  y = crsp_temp['ret_adj']
  model = sm.OLS(y, X)
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  new_row = {'DATE': date, 'OP': params[1], 'log(BE/ME)': params[2], 'log(ME)': params[3], 'r1': params[4], 'r12': params[5], 'r^2':adj_r2*100 }
  df = df.append(new_row, ignore_index=True)
  print(date)

table_2a.loc['Operating profitability', '1'] = "{:.2f} ({:.2f})".format(df['OP'].mean(), df['OP'].mean()/(df['OP'].std()/np.sqrt(len(df))))
table_2a.loc['log(BE/ME)', '1'] = "{:.2f} ({:.2f})".format(df['log(BE/ME)'].mean(), df['log(BE/ME)'].mean()/(df['log(BE/ME)'].std()/np.sqrt(len(df))))
table_2a.loc['log(ME)', '1'] = "{:.2f} ({:.2f})".format(df['log(ME)'].mean(), df['log(ME)'].mean()/(df['log(ME)'].std()/np.sqrt(len(df))))
table_2a.loc['R1', '1'] = "{:.2f} ({:.2f})".format(df['r1'].mean(), df['r1'].mean()/(df['r1'].std()/np.sqrt(len(df))))
table_2a.loc['R12', '1'] = "{:.2f} ({:.2f})".format(df['r12'].mean(), df['r12'].mean()/(df['r12'].std()/np.sqrt(len(df))))

table_2a.loc['Adjusted R2', '1']=df['r^2'].mean()

#Microcaps

df = pd.DataFrame({'DATE':[], 'OP': [], 'log(BE/ME)': [], 'log(ME)': [], 'r1': [], 'r12': [], 'r^2':[]})
dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  crsp_temp=crsp_micro[crsp_micro['date']==date]
  crsp_temp.fillna(value=0, inplace=True)
  X=crsp_temp[['op_scaled', 'log_book_to_market', 'log_market_equity', 'return_t-1', 'return_t-2_t-12'] ]
  X = sm.add_constant(X)
  y = crsp_temp['ret_adj']
  model = sm.OLS(y, X)
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  new_row = {'DATE': date, 'OP': params[1], 'log(BE/ME)': params[2], 'log(ME)': params[3], 'r1': params[4], 'r12': params[5], 'r^2':adj_r2*100 }
  df = df.append(new_row, ignore_index=True)
  print(date)

table_2b.loc['Operating profitability', '1'] = "{:.2f} ({:.2f})".format(df['OP'].mean(), df['OP'].mean()/(df['OP'].std()/np.sqrt(len(df))))
table_2b.loc['log(BE/ME)', '1'] = "{:.2f} ({:.2f})".format(df['log(BE/ME)'].mean(), df['log(BE/ME)'].mean()/(df['log(BE/ME)'].std()/np.sqrt(len(df))))
table_2b.loc['log(ME)', '1'] = "{:.2f} ({:.2f})".format(df['log(ME)'].mean(), df['log(ME)'].mean()/(df['log(ME)'].std()/np.sqrt(len(df))))
table_2b.loc['R1', '1'] = "{:.2f} ({:.2f})".format(df['r1'].mean(), df['r1'].mean()/(df['r1'].std()/np.sqrt(len(df))))
table_2b.loc['R12', '1'] = "{:.2f} ({:.2f})".format(df['r12'].mean(), df['r12'].mean()/(df['r12'].std()/np.sqrt(len(df))))

table_2b.loc['Adjusted R2', '1']=df['r^2'].mean()

table_2b

"""For columns 2-7, we exclude observations with missing accruals or cash based operating profitability and trim explanatory variables at the 1st and 99th percentile."""

crsp.dropna(subset=['accruals'], inplace=True)
crsp.dropna(subset=['cbop'], inplace=True)

#trim explanatory variables at 1st and 99th percentile

for x in ['op_scaled', 'accruals_scaled', 'cbop_scaled', 'log_book_to_market',
'log_market_equity', 'return_t-1', 'return_t-2_t-12']:
  upper_threshold = crsp[x].quantile(0.99)
  crsp[x] = crsp[x].clip(upper=upper_threshold)
  lower_threshold= crsp[x].quantile(0.01)
  crsp[x] = crsp[x].clip(lower=lower_threshold)


crsp_micro.dropna(subset=['accruals'], inplace=True)
crsp_micro.dropna(subset=['cbop'], inplace=True)

#trim explanatory variables at 1st and 99th percentile

for x in ['op_scaled', 'accruals_scaled', 'cbop_scaled', 'log_book_to_market',
'log_market_equity', 'return_t-1', 'return_t-2_t-12']:
  upper_threshold = crsp_micro[x].quantile(0.99)
  crsp_micro[x] = crsp_micro[x].clip(upper=upper_threshold)
  lower_threshold= crsp_micro[x].quantile(0.01)
  crsp_micro[x] = crsp_micro[x].clip(lower=lower_threshold)

#specification 2
df = pd.DataFrame({'DATE':[], 'OP': [], 'log(BE/ME)': [], 'log(ME)': [], 'r1': [], 'r12': [], 'r^2':[]})

dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  crsp_temp=crsp[crsp['date']==date]
  crsp_temp.fillna(value=0, inplace=True)
  X=crsp_temp[['op_scaled', 'log_book_to_market', 'log_market_equity', 'return_t-1', 'return_t-2_t-12'] ]
  X = sm.add_constant(X)
  y = crsp_temp['ret_adj']
  model = sm.OLS(y, X)
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  new_row = {'DATE': date, 'OP': params[1], 'log(BE/ME)': params[2], 'log(ME)': params[3], 'r1': params[4], 'r12': params[5], 'r^2':adj_r2*100 }
  df = df.append(new_row, ignore_index=True)
  print(date)

table_2a.loc['Operating profitability', '2'] = "{:.2f} ({:.2f})".format(df['OP'].mean(), df['OP'].mean()/(df['OP'].std()/np.sqrt(len(df))))
table_2a.loc['log(BE/ME)', '2'] = "{:.2f} ({:.2f})".format(df['log(BE/ME)'].mean(), df['log(BE/ME)'].mean()/(df['log(BE/ME)'].std()/np.sqrt(len(df))))
table_2a.loc['log(ME)', '2'] = "{:.2f} ({:.2f})".format(df['log(ME)'].mean(), df['log(ME)'].mean()/(df['log(ME)'].std()/np.sqrt(len(df))))
table_2a.loc['R1', '2'] = "{:.2f} ({:.2f})".format(df['r1'].mean(), df['r1'].mean()/(df['r1'].std()/np.sqrt(len(df))))
table_2a.loc['R12', '2'] = "{:.2f} ({:.2f})".format(df['r12'].mean(), df['r12'].mean()/(df['r12'].std()/np.sqrt(len(df))))

table_2a.loc['Adjusted R2', '2']=df['r^2'].mean()

#specification 2-micro

df = pd.DataFrame({'DATE':[], 'OP': [], 'log(BE/ME)': [], 'log(ME)': [], 'r1': [], 'r12': [], 'r^2':[]})

dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  crsp_temp=crsp_micro[crsp_micro['date']==date]
  crsp_temp.fillna(value=0, inplace=True)
  X=crsp_temp[['op_scaled', 'log_book_to_market', 'log_market_equity', 'return_t-1', 'return_t-2_t-12'] ]
  X = sm.add_constant(X)
  y = crsp_temp['ret_adj']
  model = sm.OLS(y, X)
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  new_row = {'DATE': date, 'OP': params[1], 'log(BE/ME)': params[2], 'log(ME)': params[3], 'r1': params[4], 'r12': params[5], 'r^2':adj_r2*100 }
  df = df.append(new_row, ignore_index=True)
  print(date)

table_2b.loc['Operating profitability', '2'] = "{:.2f} ({:.2f})".format(df['OP'].mean(), df['OP'].mean()/(df['OP'].std()/np.sqrt(len(df))))
table_2b.loc['log(BE/ME)', '2'] = "{:.2f} ({:.2f})".format(df['log(BE/ME)'].mean(), df['log(BE/ME)'].mean()/(df['log(BE/ME)'].std()/np.sqrt(len(df))))
table_2b.loc['log(ME)', '2'] = "{:.2f} ({:.2f})".format(df['log(ME)'].mean(), df['log(ME)'].mean()/(df['log(ME)'].std()/np.sqrt(len(df))))
table_2b.loc['R1', '2'] = "{:.2f} ({:.2f})".format(df['r1'].mean(), df['r1'].mean()/(df['r1'].std()/np.sqrt(len(df))))
table_2b.loc['R12', '2'] = "{:.2f} ({:.2f})".format(df['r12'].mean(), df['r12'].mean()/(df['r12'].std()/np.sqrt(len(df))))

table_2b.loc['Adjusted R2', '2']=df['r^2'].mean()

#specification 3
df = pd.DataFrame({'DATE':[], 'Accruals': [], 'log(BE/ME)': [], 'log(ME)': [], 'r1': [], 'r12': [], 'r^2':[]})

dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  crsp_temp=crsp[crsp['date']==date]
  crsp_temp.fillna(value=0, inplace=True)
  X=crsp_temp[['accruals_scaled', 'log_book_to_market', 'log_market_equity', 'return_t-1', 'return_t-2_t-12'] ]
  X = sm.add_constant(X)
  y = crsp_temp['ret_adj']
  model = sm.OLS(y, X)
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  new_row = {'DATE': date, 'Accruals': params[1], 'log(BE/ME)': params[2], 'log(ME)': params[3], 'r1': params[4], 'r12': params[5], 'r^2':adj_r2*100 }
  df = df.append(new_row, ignore_index=True)
  print(date)


table_2a.loc['Accruals', '3'] = "{:.2f} ({:.2f})".format(df['Accruals'].mean(), df['Accruals'].mean()/(df['Accruals'].std()/np.sqrt(len(df))))
table_2a.loc['log(BE/ME)', '3'] = "{:.2f} ({:.2f})".format(df['log(BE/ME)'].mean(), df['log(BE/ME)'].mean()/(df['log(BE/ME)'].std()/np.sqrt(len(df))))
table_2a.loc['log(ME)', '3'] = "{:.2f} ({:.2f})".format(df['log(ME)'].mean(), df['log(ME)'].mean()/(df['log(ME)'].std()/np.sqrt(len(df))))
table_2a.loc['R1', '3'] = "{:.2f} ({:.2f})".format(df['r1'].mean(), df['r1'].mean()/(df['r1'].std()/np.sqrt(len(df))))
table_2a.loc['R12', '3'] = "{:.2f} ({:.2f})".format(df['r12'].mean(), df['r12'].mean()/(df['r12'].std()/np.sqrt(len(df))))

table_2a.loc['Adjusted R2', '3']=df['r^2'].mean()

#specification 3-micro
df = pd.DataFrame({'DATE':[], 'Accruals': [], 'log(BE/ME)': [], 'log(ME)': [], 'r1': [], 'r12': [], 'r^2':[]})

dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  crsp_temp=crsp_micro[crsp_micro['date']==date]
  crsp_temp.fillna(value=0, inplace=True)
  X=crsp_temp[['accruals_scaled', 'log_book_to_market', 'log_market_equity', 'return_t-1', 'return_t-2_t-12'] ]
  X = sm.add_constant(X)
  y = crsp_temp['ret_adj']
  model = sm.OLS(y, X)
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  new_row = {'DATE': date, 'Accruals': params[1], 'log(BE/ME)': params[2], 'log(ME)': params[3], 'r1': params[4], 'r12': params[5], 'r^2':adj_r2*100 }
  df = df.append(new_row, ignore_index=True)
  print(date)


table_2b.loc['Accruals', '3'] = "{:.2f} ({:.2f})".format(df['Accruals'].mean(), df['Accruals'].mean()/(df['Accruals'].std()/np.sqrt(len(df))))
table_2b.loc['log(BE/ME)', '3'] = "{:.2f} ({:.2f})".format(df['log(BE/ME)'].mean(), df['log(BE/ME)'].mean()/(df['log(BE/ME)'].std()/np.sqrt(len(df))))
table_2b.loc['log(ME)', '3'] = "{:.2f} ({:.2f})".format(df['log(ME)'].mean(), df['log(ME)'].mean()/(df['log(ME)'].std()/np.sqrt(len(df))))
table_2b.loc['R1', '3'] = "{:.2f} ({:.2f})".format(df['r1'].mean(), df['r1'].mean()/(df['r1'].std()/np.sqrt(len(df))))
table_2b.loc['R12', '3'] = "{:.2f} ({:.2f})".format(df['r12'].mean(), df['r12'].mean()/(df['r12'].std()/np.sqrt(len(df))))

table_2b.loc['Adjusted R2', '3']=df['r^2'].mean()

#Specification 4
df = pd.DataFrame({'DATE':[], 'OP':[], 'Accruals': [], 'log(BE/ME)': [], 'log(ME)': [], 'r1': [], 'r12': [], 'r^2':[]})

dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  crsp_temp=crsp[crsp['date']==date]
  crsp_temp.fillna(value=0, inplace=True)
  X=crsp_temp[['op_scaled', 'log_book_to_market', 'log_market_equity', 'return_t-1', 'return_t-2_t-12', 'accruals_scaled'] ]
  X = sm.add_constant(X)
  y = crsp_temp['ret_adj']
  model = sm.OLS(y, X)
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  new_row = {'DATE': date, 'OP': params[1], 'log(BE/ME)': params[2], 'log(ME)': params[3], 'r1': params[4], 'r12': params[5], 'Accruals': params[6], 'r^2':adj_r2*100 }
  df = df.append(new_row, ignore_index=True)
  print(date)


table_2a.loc['Accruals', '4'] = "{:.2f} ({:.2f})".format(df['Accruals'].mean(), df['Accruals'].mean()/(df['Accruals'].std()/np.sqrt(len(df))))
table_2a.loc['Operating profitability', '4'] = "{:.2f} ({:.2f})".format(df['OP'].mean(), df['OP'].mean()/(df['OP'].std()/np.sqrt(len(df))))

table_2a.loc['log(BE/ME)', '4'] = "{:.2f} ({:.2f})".format(df['log(BE/ME)'].mean(), df['log(BE/ME)'].mean()/(df['log(BE/ME)'].std()/np.sqrt(len(df))))
table_2a.loc['log(ME)', '4'] = "{:.2f} ({:.2f})".format(df['log(ME)'].mean(), df['log(ME)'].mean()/(df['log(ME)'].std()/np.sqrt(len(df))))
table_2a.loc['R1', '4'] = "{:.2f} ({:.2f})".format(df['r1'].mean(), df['r1'].mean()/(df['r1'].std()/np.sqrt(len(df))))
table_2a.loc['R12', '4'] = "{:.2f} ({:.2f})".format(df['r12'].mean(), df['r12'].mean()/(df['r12'].std()/np.sqrt(len(df))))

table_2a.loc['Adjusted R2', '4']=df['r^2'].mean()

#Specification 4-micro
df = pd.DataFrame({'DATE':[], 'OP':[], 'Accruals': [], 'log(BE/ME)': [], 'log(ME)': [], 'r1': [], 'r12': [], 'r^2':[]})

dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  crsp_temp=crsp_micro[crsp_micro['date']==date]
  crsp_temp.fillna(value=0, inplace=True)
  X=crsp_temp[['op_scaled', 'log_book_to_market', 'log_market_equity', 'return_t-1', 'return_t-2_t-12', 'accruals_scaled'] ]
  X = sm.add_constant(X)
  y = crsp_temp['ret_adj']
  model = sm.OLS(y, X)
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  new_row = {'DATE': date, 'OP': params[1], 'log(BE/ME)': params[2], 'log(ME)': params[3], 'r1': params[4], 'r12': params[5], 'Accruals': params[6], 'r^2':adj_r2*100 }
  df = df.append(new_row, ignore_index=True)
  print(date)


table_2b.loc['Accruals', '4'] = "{:.2f} ({:.2f})".format(df['Accruals'].mean(), df['Accruals'].mean()/(df['Accruals'].std()/np.sqrt(len(df))))
table_2b.loc['Operating profitability', '4'] = "{:.2f} ({:.2f})".format(df['OP'].mean(), df['OP'].mean()/(df['OP'].std()/np.sqrt(len(df))))

table_2b.loc['log(BE/ME)', '4'] = "{:.2f} ({:.2f})".format(df['log(BE/ME)'].mean(), df['log(BE/ME)'].mean()/(df['log(BE/ME)'].std()/np.sqrt(len(df))))
table_2b.loc['log(ME)', '4'] = "{:.2f} ({:.2f})".format(df['log(ME)'].mean(), df['log(ME)'].mean()/(df['log(ME)'].std()/np.sqrt(len(df))))
table_2b.loc['R1', '4'] = "{:.2f} ({:.2f})".format(df['r1'].mean(), df['r1'].mean()/(df['r1'].std()/np.sqrt(len(df))))
table_2b.loc['R12', '4'] = "{:.2f} ({:.2f})".format(df['r12'].mean(), df['r12'].mean()/(df['r12'].std()/np.sqrt(len(df))))

table_2b.loc['Adjusted R2', '4']=df['r^2'].mean()

#Specification 5
df = pd.DataFrame({'DATE':[], 'CBOP':[], 'log(BE/ME)': [], 'log(ME)': [], 'r1': [], 'r12': [], 'r^2':[]})

dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  crsp_temp=crsp[crsp['date']==date]
  crsp_temp.fillna(value=0, inplace=True)
  X=crsp_temp[['cbop_scaled', 'log_book_to_market', 'log_market_equity', 'return_t-1', 'return_t-2_t-12'] ]
  X = sm.add_constant(X)
  y = crsp_temp['ret_adj']
  model = sm.OLS(y, X)
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  new_row = {'DATE': date, 'CBOP': params[1], 'log(BE/ME)': params[2], 'log(ME)': params[3], 'r1': params[4], 'r12': params[5],  'r^2':adj_r2*100 }
  df = df.append(new_row, ignore_index=True)
  print(date)


#table_2a.loc['Accruals', '4'] = "{:.2f} ({:.2f})".format(df['Accruals'].mean(), df['Accruals'].mean()/(df['Accruals'].std()/np.sqrt(len(df))))
table_2a.loc['Cash based operating profitability', '5'] = "{:.2f} ({:.2f})".format(df['CBOP'].mean(), df['CBOP'].mean()/(df['CBOP'].std()/np.sqrt(len(df))))

table_2a.loc['log(BE/ME)', '5'] = "{:.2f} ({:.2f})".format(df['log(BE/ME)'].mean(), df['log(BE/ME)'].mean()/(df['log(BE/ME)'].std()/np.sqrt(len(df))))
table_2a.loc['log(ME)', '5'] = "{:.2f} ({:.2f})".format(df['log(ME)'].mean(), df['log(ME)'].mean()/(df['log(ME)'].std()/np.sqrt(len(df))))
table_2a.loc['R1', '5'] = "{:.2f} ({:.2f})".format(df['r1'].mean(), df['r1'].mean()/(df['r1'].std()/np.sqrt(len(df))))
table_2a.loc['R12', '5'] = "{:.2f} ({:.2f})".format(df['r12'].mean(), df['r12'].mean()/(df['r12'].std()/np.sqrt(len(df))))

table_2a.loc['Adjusted R2', '5']=df['r^2'].mean()

#Specification 5-micro
df = pd.DataFrame({'DATE':[], 'CBOP':[], 'log(BE/ME)': [], 'log(ME)': [], 'r1': [], 'r12': [], 'r^2':[]})

dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  crsp_temp=crsp_micro[crsp_micro['date']==date]
  crsp_temp.fillna(value=0, inplace=True)
  X=crsp_temp[['cbop_scaled', 'log_book_to_market', 'log_market_equity', 'return_t-1', 'return_t-2_t-12'] ]
  X = sm.add_constant(X)
  y = crsp_temp['ret_adj']
  model = sm.OLS(y, X)
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  new_row = {'DATE': date, 'CBOP': params[1], 'log(BE/ME)': params[2], 'log(ME)': params[3], 'r1': params[4], 'r12': params[5],  'r^2':adj_r2*100 }
  df = df.append(new_row, ignore_index=True)
  print(date)


#table_2a.loc['Accruals', '4'] = "{:.2f} ({:.2f})".format(df['Accruals'].mean(), df['Accruals'].mean()/(df['Accruals'].std()/np.sqrt(len(df))))
table_2b.loc['Cash based operating profitability', '5'] = "{:.2f} ({:.2f})".format(df['CBOP'].mean(), df['CBOP'].mean()/(df['CBOP'].std()/np.sqrt(len(df))))

table_2b.loc['log(BE/ME)', '5'] = "{:.2f} ({:.2f})".format(df['log(BE/ME)'].mean(), df['log(BE/ME)'].mean()/(df['log(BE/ME)'].std()/np.sqrt(len(df))))
table_2b.loc['log(ME)', '5'] = "{:.2f} ({:.2f})".format(df['log(ME)'].mean(), df['log(ME)'].mean()/(df['log(ME)'].std()/np.sqrt(len(df))))
table_2b.loc['R1', '5'] = "{:.2f} ({:.2f})".format(df['r1'].mean(), df['r1'].mean()/(df['r1'].std()/np.sqrt(len(df))))
table_2b.loc['R12', '5'] = "{:.2f} ({:.2f})".format(df['r12'].mean(), df['r12'].mean()/(df['r12'].std()/np.sqrt(len(df))))

table_2b.loc['Adjusted R2', '5']=df['r^2'].mean()

#Specification 6
df = pd.DataFrame({'DATE':[], 'CBOP':[], 'log(BE/ME)': [], 'log(ME)': [], 'r1': [], 'r12': [], 'Accruals':[], 'r^2':[]})

dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  crsp_temp=crsp[crsp['date']==date]
  crsp_temp.fillna(value=0, inplace=True)
  X=crsp_temp[['cbop_scaled', 'log_book_to_market', 'log_market_equity', 'return_t-1', 'return_t-2_t-12', 'accruals_scaled'] ]
  X = sm.add_constant(X)
  y = crsp_temp['ret_adj']
  model = sm.OLS(y, X)
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  new_row = {'DATE': date, 'CBOP': params[1], 'log(BE/ME)': params[2], 'log(ME)': params[3], 'r1': params[4], 'r12': params[5], 'Accruals':params[6], 'r^2':adj_r2*100 }
  df = df.append(new_row, ignore_index=True)
  print(date)


table_2a.loc['Accruals', '6'] = "{:.2f} ({:.2f})".format(df['Accruals'].mean(), df['Accruals'].mean()/(df['Accruals'].std()/np.sqrt(len(df))))
table_2a.loc['Cash based operating profitability', '6'] = "{:.2f} ({:.2f})".format(df['CBOP'].mean(), df['CBOP'].mean()/(df['CBOP'].std()/np.sqrt(len(df))))

table_2a.loc['log(BE/ME)', '6'] = "{:.2f} ({:.2f})".format(df['log(BE/ME)'].mean(), df['log(BE/ME)'].mean()/(df['log(BE/ME)'].std()/np.sqrt(len(df))))
table_2a.loc['log(ME)', '6'] = "{:.2f} ({:.2f})".format(df['log(ME)'].mean(), df['log(ME)'].mean()/(df['log(ME)'].std()/np.sqrt(len(df))))
table_2a.loc['R1', '6'] = "{:.2f} ({:.2f})".format(df['r1'].mean(), df['r1'].mean()/(df['r1'].std()/np.sqrt(len(df))))
table_2a.loc['R12', '6'] = "{:.2f} ({:.2f})".format(df['r12'].mean(), df['r12'].mean()/(df['r12'].std()/np.sqrt(len(df))))

table_2a.loc['Adjusted R2', '6']=df['r^2'].mean()

#Specification 6-micro
df = pd.DataFrame({'DATE':[], 'CBOP':[], 'log(BE/ME)': [], 'log(ME)': [], 'r1': [], 'r12': [], 'Accruals':[], 'r^2':[]})

dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  crsp_temp=crsp_micro[crsp_micro['date']==date]
  crsp_temp.fillna(value=0, inplace=True)
  X=crsp_temp[['cbop_scaled', 'log_book_to_market', 'log_market_equity', 'return_t-1', 'return_t-2_t-12', 'accruals_scaled'] ]
  X = sm.add_constant(X)
  y = crsp_temp['ret_adj']
  model = sm.OLS(y, X)
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  new_row = {'DATE': date, 'CBOP': params[1], 'log(BE/ME)': params[2], 'log(ME)': params[3], 'r1': params[4], 'r12': params[5], 'Accruals':params[6], 'r^2':adj_r2*100 }
  df = df.append(new_row, ignore_index=True)
  print(date)


table_2b.loc['Accruals', '6'] = "{:.2f} ({:.2f})".format(df['Accruals'].mean(), df['Accruals'].mean()/(df['Accruals'].std()/np.sqrt(len(df))))
table_2b.loc['Cash based operating profitability', '6'] = "{:.2f} ({:.2f})".format(df['CBOP'].mean(), df['CBOP'].mean()/(df['CBOP'].std()/np.sqrt(len(df))))

table_2b.loc['log(BE/ME)', '6'] = "{:.2f} ({:.2f})".format(df['log(BE/ME)'].mean(), df['log(BE/ME)'].mean()/(df['log(BE/ME)'].std()/np.sqrt(len(df))))
table_2b.loc['log(ME)', '6'] = "{:.2f} ({:.2f})".format(df['log(ME)'].mean(), df['log(ME)'].mean()/(df['log(ME)'].std()/np.sqrt(len(df))))
table_2b.loc['R1', '6'] = "{:.2f} ({:.2f})".format(df['r1'].mean(), df['r1'].mean()/(df['r1'].std()/np.sqrt(len(df))))
table_2b.loc['R12', '6'] = "{:.2f} ({:.2f})".format(df['r12'].mean(), df['r12'].mean()/(df['r12'].std()/np.sqrt(len(df))))

table_2b.loc['Adjusted R2', '6']=df['r^2'].mean()

#Specification 7
df = pd.DataFrame({'DATE':[], 'OP':[], 'log(BE/ME)': [], 'log(ME)': [], 'r1': [], 'r12': [], 'CBOP': [], 'r^2':[]})

dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  crsp_temp=crsp[crsp['date']==date]
  crsp_temp.fillna(value=0, inplace=True)
  X=crsp_temp[['op_scaled', 'log_book_to_market', 'log_market_equity', 'return_t-1', 'return_t-2_t-12', 'cbop_scaled'] ]
  X = sm.add_constant(X)
  y = crsp_temp['ret_adj']
  model = sm.OLS(y, X)
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  new_row = {'DATE': date, 'OP': params[1], 'log(BE/ME)': params[2], 'log(ME)': params[3], 'r1': params[4], 'r12': params[5], 'CBOP':params[6], 'r^2':adj_r2*100 }
  df = df.append(new_row, ignore_index=True)
  print(date)


#table_2a.loc['Accruals', '6'] = "{:.2f} ({:.2f})".format(df['Accruals'].mean(), df['Accruals'].mean()/(df['Accruals'].std()/np.sqrt(len(df))))
table_2a.loc['Cash based operating profitability', '7'] = "{:.2f} ({:.2f})".format(df['CBOP'].mean(), df['CBOP'].mean()/(df['CBOP'].std()/np.sqrt(len(df))))
table_2a.loc['Operating profitability', '7'] = "{:.2f} ({:.2f})".format(df['OP'].mean(), df['OP'].mean()/(df['OP'].std()/np.sqrt(len(df))))

table_2a.loc['log(BE/ME)', '7'] = "{:.2f} ({:.2f})".format(df['log(BE/ME)'].mean(), df['log(BE/ME)'].mean()/(df['log(BE/ME)'].std()/np.sqrt(len(df))))
table_2a.loc['log(ME)', '7'] = "{:.2f} ({:.2f})".format(df['log(ME)'].mean(), df['log(ME)'].mean()/(df['log(ME)'].std()/np.sqrt(len(df))))
table_2a.loc['R1', '7'] = "{:.2f} ({:.2f})".format(df['r1'].mean(), df['r1'].mean()/(df['r1'].std()/np.sqrt(len(df))))
table_2a.loc['R12', '7'] = "{:.2f} ({:.2f})".format(df['r12'].mean(), df['r12'].mean()/(df['r12'].std()/np.sqrt(len(df))))

table_2a.loc['Adjusted R2', '7']=df['r^2'].mean()

#Specification 7-micro
df = pd.DataFrame({'DATE':[], 'OP':[], 'log(BE/ME)': [], 'log(ME)': [], 'r1': [], 'r12': [], 'CBOP': [], 'r^2':[]})

dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  crsp_temp=crsp_micro[crsp_micro['date']==date]
  crsp_temp.fillna(value=0, inplace=True)
  X=crsp_temp[['op_scaled', 'log_book_to_market', 'log_market_equity', 'return_t-1', 'return_t-2_t-12', 'cbop_scaled'] ]
  X = sm.add_constant(X)
  y = crsp_temp['ret_adj']
  model = sm.OLS(y, X)
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  new_row = {'DATE': date, 'OP': params[1], 'log(BE/ME)': params[2], 'log(ME)': params[3], 'r1': params[4], 'r12': params[5], 'CBOP':params[6], 'r^2':adj_r2*100 }
  df = df.append(new_row, ignore_index=True)
  print(date)


#table_2a.loc['Accruals', '6'] = "{:.2f} ({:.2f})".format(df['Accruals'].mean(), df['Accruals'].mean()/(df['Accruals'].std()/np.sqrt(len(df))))
table_2b.loc['Cash based operating profitability', '7'] = "{:.2f} ({:.2f})".format(df['CBOP'].mean(), df['CBOP'].mean()/(df['CBOP'].std()/np.sqrt(len(df))))
table_2b.loc['Operating profitability', '7'] = "{:.2f} ({:.2f})".format(df['OP'].mean(), df['OP'].mean()/(df['OP'].std()/np.sqrt(len(df))))

table_2b.loc['log(BE/ME)', '7'] = "{:.2f} ({:.2f})".format(df['log(BE/ME)'].mean(), df['log(BE/ME)'].mean()/(df['log(BE/ME)'].std()/np.sqrt(len(df))))
table_2b.loc['log(ME)', '7'] = "{:.2f} ({:.2f})".format(df['log(ME)'].mean(), df['log(ME)'].mean()/(df['log(ME)'].std()/np.sqrt(len(df))))
table_2b.loc['R1', '7'] = "{:.2f} ({:.2f})".format(df['r1'].mean(), df['r1'].mean()/(df['r1'].std()/np.sqrt(len(df))))
table_2b.loc['R12', '7'] = "{:.2f} ({:.2f})".format(df['r12'].mean(), df['r12'].mean()/(df['r12'].std()/np.sqrt(len(df))))

table_2b.loc['Adjusted R2', '7']=df['r^2'].mean()

table_2a.fillna('-', inplace=True)

table_2a

table_2b

break

"""# Table 3"""

crsp

3crsp['date']=pd.to_datetime(crsp['date'])
sb=crsp[(crsp['date'].dt.month==6) & (crsp['exchange']=="NYSE")]
sb.drop('level_0', axis=1, inplace=True)

sb.to_sql('sb', conn, if_exists='replace')
query='''
        SELECT DISTINCT permno, reference_date, mkt_cap as ff_mkt_equity
        FROM sb
        '''

sb=pd.read_sql(query, conn)

#get 20% quantile of market equity for NYSE
sb['microcap_mkt_cap'] = sb.groupby('reference_date')['ff_mkt_equity'].transform(lambda x: x.quantile(0.2))

sb.to_sql('sb', conn, if_exists='replace')

query='''
        SELECT DISTINCT reference_date, microcap_mkt_cap
        FROM SB
        '''
sb=pd.read_sql(query, conn)
crsp.drop('level_0', axis=1, inplace=True)
crsp.to_sql('crsp', conn, if_exists='replace')
sb.to_sql('sb', conn, if_exists='replace')

query='''
        SELECT DISTINCT crsp.*, sb.microcap_mkt_cap
        FROM crsp
        LEFT JOIN sb
        ON crsp.reference_date=sb.reference_date
        '''
crsp_sb=pd.read_sql(query, conn)
crsp=crsp_sb

crsp_copy=crsp.copy()
crsp = crsp_copy[crsp_copy['market_equity'] >= crsp_copy['microcap_mkt_cap']]

crsp_copy

#filter sample

crsp = crsp[(crsp['date'] >= '1988-07-01') & (crsp['date'] <= '2014-12-31')]

#trim variables at 1st and 99th percentile
for x in ['op_scaled',  'log_book_to_market',
'log_market_equity', 'return_t-1', 'return_t-2_t-12']:
  upper_threshold = crsp[x].quantile(0.99)
  crsp[x] = crsp[x].clip(upper=upper_threshold)
  lower_threshold= crsp[x].quantile(0.01)
  crsp[x] = crsp[x].clip(lower=lower_threshold)

"""**Specification 1: Accruals from the statement of cash flows**"""

# create list of row names
index = ['Operating profitability', 'Accruals', 'Cash based operating profitability', 'log(BE/ME)', 'log(ME)', 'R1', 'R12', 'Adjusted R2']

# create list of column names with numbers in brackets
columns = ['1', '2', '3', '4', '5', '6', '7', '8']

# create empty DataFrame with specified rows and columns
table_3 = pd.DataFrame(columns=columns, index=index)

#spec 1
df = pd.DataFrame({'DATE':[], 'OP': [], 'Accruals': [], 'CBOP': [], 'log(BE/ME)': [], 'log(ME)': [], 'r1': [], 'r12': [], 'r^2':[]})
dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  crsp_temp=crsp[crsp['date']==date]
  crsp_temp.fillna(value=0, inplace=True)
  X=crsp_temp[['op_scaled', 'log_book_to_market', 'log_market_equity', 'return_t-1', 'return_t-2_t-12', 'accruals_alternate_scaled', 'cbop_alternate_scaled'] ]
  X = sm.add_constant(X)
  y = crsp_temp['ret_adj']
  model = sm.OLS(y, X)
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  new_row = {'DATE': date, 'OP': params[1], 'log(BE/ME)': params[2], 'log(ME)': params[3], 'r1': params[4], 'r12': params[5], 'accruals': params[6], 'CBOP': params[7], 'r^2':adj_r2*100 }
  df = df.append(new_row, ignore_index=True)
  print(date)

table_3.loc['Operating profitability', '1'] = "{:.2f} ({:.2f})".format(df['OP'].mean(), df['OP'].mean()/(df['OP'].std()/np.sqrt(len(df))))
table_3.loc['log(BE/ME)', '1'] = "{:.2f} ({:.2f})".format(df['log(BE/ME)'].mean(), df['log(BE/ME)'].mean()/(df['log(BE/ME)'].std()/np.sqrt(len(df))))
table_3.loc['log(ME)', '1'] = "{:.2f} ({:.2f})".format(df['log(ME)'].mean(), df['log(ME)'].mean()/(df['log(ME)'].std()/np.sqrt(len(df))))
table_3.loc['R1', '1'] = "{:.2f} ({:.2f})".format(df['r1'].mean(), df['r1'].mean()/(df['r1'].std()/np.sqrt(len(df))))
table_3.loc['R12', '1'] = "{:.2f} ({:.2f})".format(df['r12'].mean(), df['r12'].mean()/(df['r12'].std()/np.sqrt(len(df))))
table_3.loc['Accruals', '1'] = "{:.2f} ({:.2f})".format(df['r1'].mean(), df['Accruals'].mean()/(df['Accruals'].std()/np.sqrt(len(df))))
table_3.loc['Cash based operating profitability', '1'] = "{:.2f} ({:.2f})".format(df['CBOP'].mean(), df['CBOP'].mean()/(df['CBOP'].std()/np.sqrt(len(df))))

table_3.loc['Adjusted R2', '1']=df['r^2'].mean()

#spec 2
df = pd.DataFrame({'DATE':[], 'CBOP': [], 'log(BE/ME)': [], 'log(ME)': [], 'r1': [], 'r12': [], 'r^2':[]})
dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  crsp_temp=crsp[crsp['date']==date]
  crsp_temp.fillna(value=0, inplace=True)
  X=crsp_temp[['cbop_scaled', 'log_book_to_market', 'log_market_equity', 'return_t-1', 'return_t-2_t-12'] ]
  X = sm.add_constant(X)
  y = crsp_temp['ret_adj']
  model = sm.OLS(y, X)
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  new_row = {'DATE': date, 'CBOP': params[1], 'log(BE/ME)': params[2], 'log(ME)': params[3], 'r1': params[4], 'r12': params[5], 'r^2':adj_r2*100 }
  df = df.append(new_row, ignore_index=True)
  print(date)

table_3.loc['Cash based operating profitability', '2'] = "{:.2f} ({:.2f})".format(df['CBOP'].mean(), df['CBOP'].mean()/(df['CBOP'].std()/np.sqrt(len(df))))
table_3.loc['log(BE/ME)', '2'] = "{:.2f} ({:.2f})".format(df['log(BE/ME)'].mean(), df['log(BE/ME)'].mean()/(df['log(BE/ME)'].std()/np.sqrt(len(df))))
table_3.loc['log(ME)', '2'] = "{:.2f} ({:.2f})".format(df['log(ME)'].mean(), df['log(ME)'].mean()/(df['log(ME)'].std()/np.sqrt(len(df))))
table_3.loc['R1', '2'] = "{:.2f} ({:.2f})".format(df['r1'].mean(), df['r1'].mean()/(df['r1'].std()/np.sqrt(len(df))))
table_3.loc['R12', '2'] = "{:.2f} ({:.2f})".format(df['r12'].mean(), df['r12'].mean()/(df['r12'].std()/np.sqrt(len(df))))
#table_3.loc['Accruals', '1'] = "{:.2f} ({:.2f})".format(df['r1'].mean(), df['Accruals'].mean()/(df['Accruals'].std()/np.sqrt(len(df))))
#table_3.loc['Cash based operating profitability', '1'] = "{:.2f} ({:.2f})".format(df['CBOP'].mean(), df['CBOP'].mean()/(df['CBOP'].std()/np.sqrt(len(df))))

table_3.loc['Adjusted R2', '2']=df['r^2'].mean()

#spec 3
df = pd.DataFrame({'DATE':[], 'CBOP': [], 'log(BE/ME)': [], 'log(ME)': [], 'r1': [], 'r12': [], 'Accruals': [], 'r^2':[]})
dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  crsp_temp=crsp[crsp['date']==date]
  crsp_temp.fillna(value=0, inplace=True)
  X=crsp_temp[['cbop_scaled', 'log_book_to_market', 'log_market_equity', 'return_t-1', 'return_t-2_t-12', 'accruals_alternate_scaled'] ]
  X = sm.add_constant(X)
  y = crsp_temp['ret_adj']
  model = sm.OLS(y, X)
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  new_row = {'DATE': date, 'CBOP': params[1], 'log(BE/ME)': params[2], 'log(ME)': params[3], 'r1': params[4], 'r12': params[5], 'Accruals':params[6], 'r^2':adj_r2*100 }
  df = df.append(new_row, ignore_index=True)
  print(date)

table_3.loc['Cash based operating profitability', '3'] = "{:.2f} ({:.2f})".format(df['CBOP'].mean(), df['CBOP'].mean()/(df['CBOP'].std()/np.sqrt(len(df))))
table_3.loc['log(BE/ME)', '3'] = "{:.2f} ({:.2f})".format(df['log(BE/ME)'].mean(), df['log(BE/ME)'].mean()/(df['log(BE/ME)'].std()/np.sqrt(len(df))))
table_3.loc['log(ME)', '3'] = "{:.2f} ({:.2f})".format(df['log(ME)'].mean(), df['log(ME)'].mean()/(df['log(ME)'].std()/np.sqrt(len(df))))
table_3.loc['R1', '3'] = "{:.2f} ({:.2f})".format(df['r1'].mean(), df['r1'].mean()/(df['r1'].std()/np.sqrt(len(df))))
table_3.loc['R12', '3'] = "{:.2f} ({:.2f})".format(df['r12'].mean(), df['r12'].mean()/(df['r12'].std()/np.sqrt(len(df))))
table_3.loc['Accruals', '3'] = "{:.2f} ({:.2f})".format(df['Accruals'].mean(), df['Accruals'].mean()/(df['Accruals'].std()/np.sqrt(len(df))))
#table_3.loc['Cash based operating profitability', '1'] = "{:.2f} ({:.2f})".format(df['CBOP'].mean(), df['CBOP'].mean()/(df['CBOP'].std()/np.sqrt(len(df))))

table_3.loc['Adjusted R2', '3']=df['r^2'].mean()

#spec 4
df = pd.DataFrame({'DATE':[], 'OP': [], 'log(BE/ME)': [], 'log(ME)': [], 'r1': [], 'r12': [],  'r^2':[]})
dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  crsp_temp=crsp[crsp['date']==date]
  crsp_temp.fillna(value=0, inplace=True)
  X=crsp_temp[['op_scaled', 'log_book_to_market', 'log_market_equity', 'return_t-1', 'return_t-2_t-12'] ]
  X = sm.add_constant(X)
  y = crsp_temp['ret_adj']
  model = sm.OLS(y, X)
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  new_row = {'DATE': date, 'OP': params[1], 'log(BE/ME)': params[2], 'log(ME)': params[3], 'r1': params[4], 'r12': params[5], 'r^2':adj_r2*100 }
  df = df.append(new_row, ignore_index=True)
  print(date)

table_3.loc['Operating profitability', '4'] = "{:.2f} ({:.2f})".format(df['OP'].mean(), df['OP'].mean()/(df['OP'].std()/np.sqrt(len(df))))
table_3.loc['log(BE/ME)', '4'] = "{:.2f} ({:.2f})".format(df['log(BE/ME)'].mean(), df['log(BE/ME)'].mean()/(df['log(BE/ME)'].std()/np.sqrt(len(df))))
table_3.loc['log(ME)', '4'] = "{:.2f} ({:.2f})".format(df['log(ME)'].mean(), df['log(ME)'].mean()/(df['log(ME)'].std()/np.sqrt(len(df))))
table_3.loc['R1', '4'] = "{:.2f} ({:.2f})".format(df['r1'].mean(), df['r1'].mean()/(df['r1'].std()/np.sqrt(len(df))))
table_3.loc['R12', '4'] = "{:.2f} ({:.2f})".format(df['r12'].mean(), df['r12'].mean()/(df['r12'].std()/np.sqrt(len(df))))
#table_3.loc['Cash based operating profitability', '1'] = "{:.2f} ({:.2f})".format(df['CBOP'].mean(), df['CBOP'].mean()/(df['CBOP'].std()/np.sqrt(len(df))))

table_3.loc['Adjusted R2', '4']=df['r^2'].mean()

"""**Specification 2- Accruals and Cash Based Operating Profitability From the Statement of Cash Flows**"""

#spec 5
df = pd.DataFrame({'DATE':[], 'OP': [], 'log(BE/ME)': [], 'log(ME)': [], 'r1': [], 'r12': [], 'Accruals': [],  'r^2':[]})
dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  crsp_temp=crsp[crsp['date']==date]
  crsp_temp.fillna(value=0, inplace=True)
  X=crsp_temp[['op_scaled', 'log_book_to_market', 'log_market_equity', 'return_t-1', 'return_t-2_t-12', 'accruals_alternate_scaled'] ]
  X = sm.add_constant(X)
  y = crsp_temp['ret_adj']
  model = sm.OLS(y, X)
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  new_row = {'DATE': date, 'OP': params[1], 'log(BE/ME)': params[2], 'log(ME)': params[3], 'r1': params[4], 'r12': params[5], 'Accruals':params[6], 'r^2':adj_r2*100 }
  df = df.append(new_row, ignore_index=True)
  print(date)

table_3.loc['Operating profitability', '5'] = "{:.2f} ({:.2f})".format(df['OP'].mean(), df['OP'].mean()/(df['OP'].std()/np.sqrt(len(df))))
table_3.loc['log(BE/ME)', '5'] = "{:.2f} ({:.2f})".format(df['log(BE/ME)'].mean(), df['log(BE/ME)'].mean()/(df['log(BE/ME)'].std()/np.sqrt(len(df))))
table_3.loc['log(ME)', '5'] = "{:.2f} ({:.2f})".format(df['log(ME)'].mean(), df['log(ME)'].mean()/(df['log(ME)'].std()/np.sqrt(len(df))))
table_3.loc['R1', '5'] = "{:.2f} ({:.2f})".format(df['r1'].mean(), df['r1'].mean()/(df['r1'].std()/np.sqrt(len(df))))
table_3.loc['R12', '5'] = "{:.2f} ({:.2f})".format(df['r12'].mean(), df['r12'].mean()/(df['r12'].std()/np.sqrt(len(df))))
table_3.loc['Accruals', '5'] = "{:.2f} ({:.2f})".format(df['Accruals'].mean(), df['Accruals'].mean()/(df['Accruals'].std()/np.sqrt(len(df))))

table_3.loc['Adjusted R2', '5']=df['r^2'].mean()

#spec 6
df = pd.DataFrame({'DATE':[], 'CBOP': [], 'log(BE/ME)': [], 'log(ME)': [], 'r1': [], 'r12': [], 'Accruals': [],  'r^2':[]})
dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  crsp_temp=crsp[crsp['date']==date]
  crsp_temp.fillna(value=0, inplace=True)
  X=crsp_temp[['cbop_alternate_scaled', 'log_book_to_market', 'log_market_equity', 'return_t-1', 'return_t-2_t-12'] ]
  X = sm.add_constant(X)
  y = crsp_temp['ret_adj']
  model = sm.OLS(y, X)
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  new_row = {'DATE': date, 'CBOP': params[1], 'log(BE/ME)': params[2], 'log(ME)': params[3], 'r1': params[4], 'r12': params[5], 'r^2':adj_r2*100 }
  df = df.append(new_row, ignore_index=True)
  print(date)

table_3.loc['Cash based operating profitability', '6'] = "{:.2f} ({:.2f})".format(df['CBOP'].mean(), df['CBOP'].mean()/(df['CBOP'].std()/np.sqrt(len(df))))
table_3.loc['log(BE/ME)', '6'] = "{:.2f} ({:.2f})".format(df['log(BE/ME)'].mean(), df['log(BE/ME)'].mean()/(df['log(BE/ME)'].std()/np.sqrt(len(df))))
table_3.loc['log(ME)', '6'] = "{:.2f} ({:.2f})".format(df['log(ME)'].mean(), df['log(ME)'].mean()/(df['log(ME)'].std()/np.sqrt(len(df))))
table_3.loc['R1', '6'] = "{:.2f} ({:.2f})".format(df['r1'].mean(), df['r1'].mean()/(df['r1'].std()/np.sqrt(len(df))))
table_3.loc['R12', '6'] = "{:.2f} ({:.2f})".format(df['r12'].mean(), df['r12'].mean()/(df['r12'].std()/np.sqrt(len(df))))
#table_3.loc['Accruals', '5'] = "{:.2f} ({:.2f})".format(df['Accruals'].mean(), df['Accruals'].mean()/(df['Accruals'].std()/np.sqrt(len(df))))

table_3.loc['Adjusted R2', '6']=df['r^2'].mean()

#spec 7
df = pd.DataFrame({'DATE':[], 'CBOP': [], 'log(BE/ME)': [], 'log(ME)': [], 'r1': [], 'r12': [], 'Accruals': [],  'r^2':[]})
dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  crsp_temp=crsp[crsp['date']==date]
  crsp_temp.fillna(value=0, inplace=True)
  X=crsp_temp[['cbop_alternate_scaled', 'log_book_to_market', 'log_market_equity', 'return_t-1', 'return_t-2_t-12', 'accruals_alternate_scaled'] ]
  X = sm.add_constant(X)
  y = crsp_temp['ret_adj']
  model = sm.OLS(y, X)
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  new_row = {'DATE': date, 'CBOP': params[1], 'log(BE/ME)': params[2], 'log(ME)': params[3], 'r1': params[4], 'r12': params[5], 'Accruals': params[6], 'r^2':adj_r2*100 }
  df = df.append(new_row, ignore_index=True)
  print(date)

table_3.loc['Cash based operating profitability', '7'] = "{:.2f} ({:.2f})".format(df['CBOP'].mean(), df['CBOP'].mean()/(df['CBOP'].std()/np.sqrt(len(df))))
table_3.loc['log(BE/ME)', '7'] = "{:.2f} ({:.2f})".format(df['log(BE/ME)'].mean(), df['log(BE/ME)'].mean()/(df['log(BE/ME)'].std()/np.sqrt(len(df))))
table_3.loc['log(ME)', '7'] = "{:.2f} ({:.2f})".format(df['log(ME)'].mean(), df['log(ME)'].mean()/(df['log(ME)'].std()/np.sqrt(len(df))))
table_3.loc['R1', '7'] = "{:.2f} ({:.2f})".format(df['r1'].mean(), df['r1'].mean()/(df['r1'].std()/np.sqrt(len(df))))
table_3.loc['R12', '7'] = "{:.2f} ({:.2f})".format(df['r12'].mean(), df['r12'].mean()/(df['r12'].std()/np.sqrt(len(df))))
table_3.loc['Accruals', '7'] = "{:.2f} ({:.2f})".format(df['Accruals'].mean(), df['Accruals'].mean()/(df['Accruals'].std()/np.sqrt(len(df))))

table_3.loc['Adjusted R2', '7']=df['r^2'].mean()

#spec 8
df = pd.DataFrame({'DATE':[], 'OP': [], 'log(BE/ME)': [], 'log(ME)': [], 'r1': [], 'r12': [], 'CBOP': [],  'r^2':[]})
dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  crsp_temp=crsp[crsp['date']==date]
  crsp_temp.fillna(value=0, inplace=True)
  X=crsp_temp[['op_scaled', 'log_book_to_market', 'log_market_equity', 'return_t-1', 'return_t-2_t-12', 'cbop_alternate_scaled'] ]
  X = sm.add_constant(X)
  y = crsp_temp['ret_adj']
  model = sm.OLS(y, X)
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  new_row = {'DATE': date, 'OP': params[1], 'log(BE/ME)': params[2], 'log(ME)': params[3], 'r1': params[4], 'r12': params[5], 'r^2':adj_r2*100 }
  df = df.append(new_row, ignore_index=True)
  print(date)

table_3.loc['Cash based operating profitability', '8'] = "{:.2f} ({:.2f})".format(df['CBOP'].mean(), df['CBOP'].mean()/(df['CBOP'].std()/np.sqrt(len(df))))
table_3.loc['log(BE/ME)', '8'] = "{:.2f} ({:.2f})".format(df['log(BE/ME)'].mean(), df['log(BE/ME)'].mean()/(df['log(BE/ME)'].std()/np.sqrt(len(df))))
table_3.loc['log(ME)', '8'] = "{:.2f} ({:.2f})".format(df['log(ME)'].mean(), df['log(ME)'].mean()/(df['log(ME)'].std()/np.sqrt(len(df))))
table_3.loc['R1', '8'] = "{:.2f} ({:.2f})".format(df['r1'].mean(), df['r1'].mean()/(df['r1'].std()/np.sqrt(len(df))))
table_3.loc['R12', '8'] = "{:.2f} ({:.2f})".format(df['r12'].mean(), df['r12'].mean()/(df['r12'].std()/np.sqrt(len(df))))
#table_3.loc['Accruals', '8'] = "{:.2f} ({:.2f})".format(df['Accruals'].mean(), df['Accruals'].mean()/(df['Accruals'].std()/np.sqrt(len(df))))
table_3.loc['Operating profitability', '8'] = "{:.2f} ({:.2f})".format(df['OP'].mean(), df['OP'].mean()/(df['OP'].std()/np.sqrt(len(df))))

table_3.loc['Adjusted R2', '8']=df['r^2'].mean()

table_3

"""# Table 4"""

crsp

crsp['date']=pd.to_datetime(crsp['date'])
bb=crsp[(crsp['date'].dt.month==6) & (crsp['exchange']=="NYSE")]
bb.to_sql('bb', conn, if_exists='replace')

query='''
        SELECT DISTINCT permno, reference_date, op_scaled, cbop_scaled, accruals_scaled
        FROM bb
        '''
bb=pd.read_sql(query, conn)

bb['reference_date'] = pd.to_datetime(bb['reference_date'])

# Group the DataFrame by reference_date
grouped = bb.groupby('reference_date')

def calculate_deciles(column):
    return np.percentile(column.dropna(), np.arange(0, 100, 10))
decile_breakpoints = grouped.apply(lambda x: pd.Series({
    'op_scaled': calculate_deciles(x['op_scaled']),
    'cbop_scaled': calculate_deciles(x['cbop_scaled']),
    'accruals_scaled': calculate_deciles(x['accruals_scaled'])
})).reset_index()

decile_breakpoints

crsp.columns

crsp['date']=pd.to_datetime(crsp['date'])
crsp.set_index('date', inplace=True)

for i in range(1,13):
  crsp[f't+{i}']=crsp.groupby('permno')['ret_adj'].shift(-i)

decile_breakpoints.rename(columns={'op_scaled':'op_bp', 'cbop_scaled': 'cbop_bp', 'accruals_scaled':'accruals_bp'}, inplace=True)

decile_breakpoints

crsp.reset_index(inplace=True)

crsp['date']=pd.to_datetime(crsp['date'])
p=crsp[crsp['date'].dt.month==6]

p['reference_date']=pd.to_datetime(p['reference_date'])
decile_breakpoints['reference_date']=pd.to_datetime(decile_breakpoints['reference_date'])

# Assuming 'p' and 'decile_breakpoints' are your DataFrames
merged_df = p.merge(decile_breakpoints, on='reference_date', how='left')

print(merged_df)

p=merged_df

op_bp_value = merged_df.loc[1, 'op_bp']
print(op_bp_value)

merged_df['op_portfolio'] = np.where(merged_df['op_scaled'].isna(), np.nan,
                              np.where(merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[1]), 1,
                                np.where(merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[2]), 2,
                                  np.where(merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[3]), 3,
                                    np.where(merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[4]), 4,
                                      np.where(merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[5]), 5,
                                        np.where(merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[6]), 6,
                                          np.where(merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[7]), 7,
                                            np.where(merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[8]), 8,
                                              np.where(merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[9]), 9,
                                                np.where(merged_df['op_scaled'] >= merged_df['op_bp'].apply(lambda x: x[9]), 10, np.nan))))))))))

merged_df['op_portfolio'] = np.where(merged_df['op_scaled'].isna(), np.nan,
                              np.where(merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[0]), 1,
                                np.where(merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[1]), 2,
                                  np.where(merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[2]), 3,
                                    np.where(merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[3]), 4,
                                      np.where(merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[4]), 5,
                                        np.where(merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[5]), 6,
                                          np.where(merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[6]), 7,
                                            np.where(merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[7]), 8,
                                              np.where(merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[8]), 9,
                                                np.where(merged_df['op_scaled'] >= merged_df['op_bp'].apply(lambda x: x[8]), 10, np.nan))))))))))

merged_df['op_portfolio'] = np.where(
    merged_df['op_scaled'].isna(), np.nan,
    np.where(
        merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[1]), 1,
        np.where(
            merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[2]), 2,
            np.where(
                merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[3]), 3,
                np.where(
                    merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[4]), 4,
                    np.where(
                        merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[5]), 5,
                        np.where(
                            merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[6]), 6,
                            np.where(
                                merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[7]), 7,
                                np.where(
                                    merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[8]), 8,
                                    np.where(
                                        merged_df['op_scaled'] < merged_df['op_bp'].apply(lambda x: x[9]), 9,
                                        np.where(merged_df['op_scaled'] >= merged_df['op_bp'].apply(lambda x: x[9]), 10, np.nan
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)

merged_df['op_scaled'].isnull().sum()

merged_df['op_portfolio'].value_counts()

merged_df['op_portfolio'].value_counts(dropna=False)

p=merged_df

p.columns

column_list = ['t+1', 't+2', 't+3', 't+4', 't+5', 't+6', 't+7', 't+8', 't+9', 't+10', 't+11', 't+12']
p['avg_monthly_return'] = p[column_list].mean(axis=1)

import numpy as np
column_list = ['t+1', 't+2', 't+3', 't+4', 't+5', 't+6', 't+7', 't+8', 't+9', 't+10', 't+11', 't+12']

# Assuming your DataFrame is named `p`
weighted_averages = p.groupby(['date', 'op_portfolio']).apply(
    lambda group: np.mean([np.average(group[col], weights=group['market_equity']) for col in column_list])
).reset_index()

weighted_averages.columns = ['date', 'op_portfolio', 'weighted_avg_monthly_return']

weighted_averages

portfolio_means = weighted_averages.groupby('op_portfolio')['weighted_avg_monthly_return'].mean().reset_index()
portfolio_means.columns = ['portfolio', 'mean_weighted_avg_monthly_return']

portfolio_means

"""# Table 4- REVISITED"""

crsp

crsp['date']=pd.to_datetime(crsp['date'])
crsp.set_index('date', inplace=True)

for i in range(1,13):
  crsp[f't+{i}']=crsp.groupby('permno')['ret_adj'].shift(-i)

crsp.reset_index(inplace=True)



crsp['date']=pd.to_datetime(crsp['date'])
bb=crsp[(crsp['date'].dt.month==6) & (crsp['exchange']=="NYSE")]
bb.to_sql('bb', conn, if_exists='replace')

query='''
        SELECT DISTINCT permno, reference_date, op_scaled, cbop_scaled, accruals_scaled
        FROM bb
        '''
bb=pd.read_sql(query, conn)

bb['reference_date'] = pd.to_datetime(bb['reference_date'])

import pandas as pd

# Assuming your DataFrame is named `bb`
def get_decile_breakpoints(group):
    _, breakpoints = pd.qcut(group['accruals_scaled'], 10, retbins=True, duplicates='drop')
    return pd.Series(breakpoints, name='breakpoints')

decile_breakpoints = bb.groupby('reference_date').apply(get_decile_breakpoints).reset_index()

decile_breakpoints

import pandas as pd

# Assuming your DataFrame is named `bb`
bb['deciles'] = bb.groupby('reference_date')['accruals_scaled'].transform(
    lambda group: pd.qcut(group, 10, labels=False, duplicates='drop') + 1
)

decile_breakpoints.rename(columns={1:'bp_1', 2:'bp_2', 3: 'bp_3', 4:'bp_4', 5:'bp_5', 6: 'bp_6', 7:'bp_7', 8:'bp_8', 9:'bp_9'}, inplace=True)

crsp['date']=pd.to_datetime(crsp['date'])
p=crsp[crsp['date'].dt.month==6]

p['reference_date']=pd.to_datetime(p['reference_date'])
decile_breakpoints['reference_date']=pd.to_datetime(decile_breakpoints['reference_date'])

merged_df = p.merge(decile_breakpoints, on='reference_date', how='left')

p['market_equity'].isnull().sum()

p=merged_df

p

p['portfolio'] = np.where(p['accruals_scaled'] < p['bp_1'], 1,
                np.where(p['accruals_scaled'] < p['bp_2'], 2,
                np.where(p['accruals_scaled'] < p['bp_3'], 3,
                np.where(p['accruals_scaled'] < p['bp_4'], 4,
                np.where(p['accruals_scaled'] < p['bp_5'], 5,
                np.where(p['accruals_scaled'] < p['bp_6'], 6,
                np.where(p['accruals_scaled'] < p['bp_7'], 7,
                np.where(p['accruals_scaled'] < p['bp_8'], 8,
                np.where(p['accruals_scaled'] < p['bp_9'], 9, 10)))))))))

import numpy as np

column_list = ['t+1', 't+2', 't+3', 't+4', 't+5', 't+6', 't+7', 't+8', 't+9', 't+10', 't+11', 't+12']

# Assuming your DataFrame is named `p`
weighted_averages = p.groupby(['date', 'portfolio']).apply(
    lambda group: pd.Series({col: np.average(group[col], weights=group['market_equity']) for col in column_list})
).reset_index()

weighted_averages.columns = ['date', 'portfolio'] + column_list

p.dropna(inplace=True)

weighted_averages

p

import numpy as np

column_list = ['t+1', 't+2', 't+3', 't+4', 't+5', 't+6', 't+7', 't+8', 't+9', 't+10', 't+11', 't+12']

def weighted_nanmean(column, weights):
    not_nan_mask = ~np.isnan(column)
    return np.average(column[not_nan_mask], weights=weights[not_nan_mask])

# Assuming your DataFrame is named `p`
weighted_averages = p.groupby(['date', 'portfolio']).apply(
    lambda group: pd.Series({col: weighted_nanmean(group[col], group['market_equity']) for col in column_list})
).reset_index()

weighted_averages.columns = ['date', 'portfolio'] + column_list